import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { ConfigurationService } from '../../app/config/configuration.service';

@Injectable({
  providedIn: 'root'
})
export class ClientParticulierService {

  
//private baseUrl = 'http://localhost:8081/api/v1/clients/particulier/';
private baseUrl =`${ConfigurationService.Settings.msofdURL}/api/v1/clients/particulier/`
   
  private username = 'user1';
  private password = 'user1Pass';

  constructor(private http: HttpClient) { }

  getClientData(idReper: string): Observable<any> {
    const apiUrl = `${this.baseUrl}${idReper}`;
    const headers = new HttpHeaders({ Authorization: 'Basic ' + btoa(this.username + ':' + this.password) });

    return this.http.get(apiUrl, { headers }).pipe(


      catchError((errorP: HttpErrorResponse) => {

        if (errorP.status === 404) {
          console.error("Client Inconnu du SI LCL ");
        } 
        return throwError('Une erreur s\'est produite lors de la récupération des données.');
      })
    );
  }
}
//
	  import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { ConfigurationService } from '../../app/config/configuration.service';

@Injectable({
  providedIn: 'root'
})
export class ClientEntrepriseService {

  //private baseUrl = 'http://localhost:8081/api/v1/clients/entreprise/';
 
 private baseUrl =`${ConfigurationService.Settings.msofdURL}/api/v1/clients/entreprise/`
 
  private username = 'user1';
  private password = 'user1Pass';

  // Variables pour stocker les messages d'erreur et l'idReper en mémoire
  errorMessage: string | null = null;
  storedIdReper: string | null = null;

  constructor(private http: HttpClient) { }

  getEntrepriseData(idReper: string): Observable<any> {
    const apiUrl = `${this.baseUrl}${idReper}`;
    const headers = new HttpHeaders({ Authorization: 'Basic ' + btoa(this.username + ':' + this.password) });

    return this.http.get(apiUrl, { headers }).pipe(
      catchError((errorE: HttpErrorResponse) => {

        if (errorE.status === 404) {
          console.error("Client Inconnu du SI LCL ");
        } 
        return throwError('Une erreur s\'est produite lors de la récupération des données.');
      })
    );
  }
}






