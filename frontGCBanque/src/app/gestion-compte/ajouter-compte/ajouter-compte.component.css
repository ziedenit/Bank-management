package com.cl.msofd.regleArbre;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.transaction.PlatformTransactionManager;

@Configuration
@EnableBatchProcessing
public class BatchConfiguration {

    @Bean
    public Job importUserJob(JobRepository jobRepository, Step step1) {
        return new JobBuilder("importUserJob", jobRepository)
                .incrementer(new RunIdIncrementer())
                .start(step1)
                .build();
    }

    @Bean
    public Step step1(JobRepository jobRepository, PlatformTransactionManager transactionManager, Tasklet step1Tasklet) {
        return new StepBuilder("step1", jobRepository)
                .tasklet(step1Tasklet, transactionManager)
                .build();
    }

    @Bean
    public Tasklet step1Tasklet() {
        return (contribution, chunkContext) -> {
            // Implement the tasklet logic here, e.g., reading Excel and saving to MongoDB
            return RepeatStatus.FINISHED;
        };
    }
}
    //
package com.cl.msofd.regleArbre;

import com.cl.logs.commun.CommonLogger;
import com.cl.logs.commun.CommonLoggerFactory;
import com.cl.logs.types.EventTyp;
import com.cl.logs.types.SecEventTyp;
import com.cl.msofd.controller.AlignementController;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Component;

import java.io.InputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@Component
public class ExcelReaderTasklet implements Tasklet {

    @Value("classpath:arbre.xlsx")
    private Resource resource;
    private final CommonLogger commonLogger = CommonLoggerFactory.getLogger(ExcelReaderTasklet.class);

    private final MongoTemplate mongoTemplate;

    public ExcelReaderTasklet(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public RepeatStatus execute(StepContribution stepContribution, ChunkContext chunkContext) throws Exception {
        InputStream inputStream = resource.getInputStream();
        Workbook workbook = new XSSFWorkbook(inputStream);
        Sheet sheet = workbook.getSheetAt(0);
        commonLogger.eventTyp(EventTyp.APPLICATIVE).secEventTyp(SecEventTyp.METIER).logger().info("begin execute batch");

        for (Row row : sheet) {
            Map<String, Object> regle = new HashMap<>();
            regle.put("eligibleDEP", parseEligibleDEP(row.getCell(0).getStringCellValue()));
            regle.put("dateDepotPc", parseDate(row.getCell(1).getStringCellValue()));
            regle.put("presenseDateDpeJustif", row.getCell(2).getStringCellValue().equalsIgnoreCase("oui"));
            regle.put("presenseDpe", row.getCell(3).getStringCellValue().equalsIgnoreCase("oui"));
            regle.put("dateConstruction", parseDate(row.getCell(4).getStringCellValue()));
            regle.put("classeCEP", row.getCell(5).getStringCellValue());
            regle.put("valeurCep", parseDouble(row.getCell(6).getStringCellValue()));
            regle.put("justifNormeThermique", row.getCell(7).getStringCellValue().equalsIgnoreCase("oui"));
            regle.put("normeThermique", row.getCell(8).getNumericCellValue());
            regle.put("xtra248eligible", row.getCell(9).getNumericCellValue());
            regle.put("xtra249dedie", row.getCell(10).getStringCellValue());
            regle.put("xtra250Alignement", row.getCell(11).getNumericCellValue());
            regle.put("xtra251", row.getCell(12).getNumericCellValue());
            regle.put("xtra275", row.getCell(13).getStringCellValue().equalsIgnoreCase("Y"));


            mongoTemplate.save(regle, "regles");
                    }

        workbook.close();
        inputStream.close();

        return RepeatStatus.FINISHED;
    }

    private Boolean parseEligibleDEP(String value) {
        return "Autre bien immobilier".equalsIgnoreCase(value);
    }

    private Date parseDate(String dateStr) throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        if (dateStr.contains("au")) {
            String[] dates = dateStr.split(" au ");
            return sdf.parse(dates[0].trim()); // Returning the start date for simplicity
        } else if (dateStr.contains("avant")) {
            return sdf.parse(dateStr.replace("avant ", "").trim());
        } else if (dateStr.contains("après")) {
            return sdf.parse(dateStr.replace("après ", "").trim());
        }
        return null;
    }

    private Double parseDouble(String value) {
        return Double.parseDouble(value.replace("≤", "").replace(">", "").trim());
    }
}
        //
        package com.cl.msofd.regleArbre;

import lombok.Getter;
import lombok.Setter;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.util.Date;
@Getter
@Setter
@Document(collection = "regles")
public class Regle {
    @Id
    private String id;
    private Boolean eligibleDEP;
    private Date dateDepotPc;
    private Boolean presenseDateDpeJustif;
    private Boolean presenseDpe;
    private Date dateConstruction;
    private String classeCEP;
    private Double valeurCep;
    private Boolean justifNormeThermique;
    private Double normeThermique;
    private Double xtra248eligible;
    private String xtra249dedie;
    private Double xtra250Alignement;
    private Double xtra251;
    private Boolean xtra275;

}
        //
